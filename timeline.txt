8:15pm: lambo keepit140
8:16pm: forge add keepit140.com
8:16pm: hover point keepit140.com to forge IP address
8:18pm: new github repo
8:19pm: add github repo to forge and set up auto deploy
8:20pm: set up database and run first migration
8:21pm: it's alive!: http://keepit140.com/
8:21pm: create new twitter app for local dev
8:25pm: find, and pull, thujohn/twitter
8:26pm: modify .env.example and .env while composer requiring
8:27pm: configure app (env, config.app) for twitter
8:28pm: stop and realize I need to spec out what the MVP can do
8:28pm: spec out MVP:

- show me my timeline trimmed to 140 with all 140+ showing a "show more" button that expands the tweet
- show me all my friends who commonly tweet over 140
	- how? for starters we can pull the current timeline as far as we can get it and count how many
	- later we can also have a cron job that runs regularly and stocks up # of tweets
	- doesn't seem wise to say "get all tweets for every person i follow" because feels like we'll hit API caps?, but maybe i'm wrong there?
- oh, and allow the user to auth with their twitter creds so it's not just running with mine ðŸ˜³

8:31pm: set out to do the key thing, which is authenticating as a given user. question: Can I get their authentication info with Laravel passport and then use it with Thujohn/Twitter?  if not, which do I use? crap.
8:32pm: reads the thujohn/twitter docs and BOOM it's got sample routes for login BOOM BABY
8:33pm: copy the routes and paste and see where it takes us
8:34pm: Modify laravel's default welcome.blade.php to say "keep it 140" and have a login button that points to the default route i copied and then try it to see what breaks
8:35pm: modify the callback URL in my twitter app because i had made it oauth/callback but this app defaults to twitter/callback which makes sense
8:36pm: modify the copied code to PSR-2 because it's driving me bonkers
8:36pm: in modifying that code realize I'm supposed to do some things here in this code like have an error state and save a user after successful login. set up an error state first. try to remember how to parse `->with('flash_error', 'message')` and totally forget. Google "laravel redirect with". Oh. `session('flash_error')`. ok duh
8:38pm: back to building the error page. Realize the default code isn't actually passing the twitter error along which is busted. so modify that code so we're actually getting the error code from Twitter passed to the error page so it's debug-able.

```php
    return "<h1>ERROR WILL ROBINSON</h1><p>" . session('flash_error') . "</p><p>" . session('twitter_error') . "</p>";
```
8:40pm: OK now let's modify the "success" code to save the user. Probably gonna have to add some fields to the user table. Boo, the readme code doesn't tell me what I'm gonna get back, so I'll just `dd($credentials)` here and see what we get back once it works. OK! Let's test!
8:40pm: TEST! Open up keepit140.dev... uh.. but?

```
Fatal error: Uncaught ReflectionException: Class config does not exist in /Users/mattstauffer/Sites/keepit140/vendor/laravel/framework/src/Illuminate/Container/Container.php on line 752
```

That's a new one.

8:43pm: Oh, turns out I had a string in `.env` with spaces in it and forgot to surround it with quotes. OK. Let's click this "log in button!"
8:43pm: "Authorize Keep it 140 local to use your account?" HELL YES I WILL.
8:43pm: "Class 'Input' not found".. omg this example code is some old crap. replace all calls from Input::get to Request::input.
8:44pm: Back. Back. Login button again. Authorize again.
8:44pm: OH CRAP BATTERY ALMOST DEAD GET THE CHARGER BRB
8:45pm: BOOM BABY FULL CREDENTIALS! Let's keep.... user ID, user screen_name, utc_offset, ... I guess that's it for now. Weird.. I'm expecting a token I can use for access later? No token? Oh... ok.. reading up, there's a `$token` variable. Let's dd that too and see what we get.
8:47pm: `dd($token, $credentials)`: ... this feature is temporarily available. OK, back, back, refresh, log in, authorize, and..... OK! This `$token` variable gives me "oauth_token", "oauth_token_secret", "user_id", "screen_name", and "x_auth_expires". Obviously I want to keep all of those except auth expires. So let's go add them to our migration.
8:49pm: php artisan make:migration add_twitter_details_to_user_table --table=users

```
$table->string("oauth_token");
$table->string("oauth_token_secret");
$table->string("user_id");
$table->string("screen_name");
```

Ain't nobody got time for down migrations
8:50pm: php artisan migrate
oh crap I made a remote db but not local, make one local.
8:51pm: php artisan migrate
8:51pm: edit `User.php` and add those four fields to `fillable`
8:52pm: holy crap my music stopped like 10 minutes ago. Let's goo.. Aphex Twin - Syro.
8:53pm: Update our `dd($token, $credentials)` to create a user.

```php
$user = User::create([
    'oauth_token' => $token['oauth_token'],
    'oauth_token_secret' => $token['oauth_token_secret'],
    'user_id' => $token['user_id'],
    'screen_name' => $token['screen_name'],
]);
```

8:54pm: Instead of redirecting to `/` after, let's redirect to a dashboard. for now, `/dashboard`. make a route and have it just say "welcome!" .. route closure baby

```php
Route::get('dashboard', function () {
    return 'Welcome!';
})->name('dashboard');
```
8:55pm: holy crap i'm thirsty brb
8:56pm: OK take thirty! Back back click login
8:56pm: "Class 'User' not found" AGHUGHUQEWHRIUWERHWEIULRHWEOREW
8:57pm: take thirty one
8:57pm: "SQLSTATE[HY000]: General error: 1364 Field 'name' doesn't have a default value (SQL: insert into `users` "
DUH. php artisan make:migration remove_unnecessary_default_users_fields --table=users

```php
Schema::table('users', function (Blueprint $table) {
    $table->dropColumn('name');
    $table->dropColumn('email');
    $table->dropColumn('password');
});
```

php artisan migrate

8:59pm: TAKE THIRTY THREE OR TWO OR WHATEVER
9:00pm: Success! Wish TDD-ing web hooks were easier, because this would've taken less time if it were.
9:00pm: Frantic brain fart. Uh. What next? OK, let's verify SQL data.
9:01pm: Realize A) I forgot to log the user in and B) there's no logic in there for returning users and C) the dashboard isn't protected against not-logged-in users.
9:01pm: Add `Auth::login($user)` to the return route and make the `User::create` a `firstOrCreate` and apply the `auth` middleware to the dashboard route. Also eat a lime Chobani.
9:02pm: Realize the "redirect to on non-auth'ed access to dashboard" URL is def gonna be wrong and ignore it.
9:03pm: Refresh dashboard. "Route [login] not defined." Duh. Let's fix that. First, let's fix App\Http\Middleware\REdirectIfAuthenticated to go to "dashboard" instead of "home" on success. This is for the "guest" middleware.
9:05pm: I still can't remember where the logic is that says where to go and I don't wanna deal with it, but I do know the default is a route named "login" so here we go:

```php
Route::get('login', function () {
    return '<a href="' . route('twitter.login') . ">Log in with Twitter</a>";
})->name('login')->middleware('guest');
```

Boom.
9:06pm: Daughter is crying. Please go back to sleep! I'm writing hacky code here!
9:07pm: Nope. Not happening. Gonna go rock her back to sleep. BRB.
9:56pm: UGH there goes my night. OK. Back at it. Where were we? Logins. Great! Login works now. Just realized my firstOrCreate is wrong though. Change from this:

```php
$user = User::firstOrCreate([
    'oauth_token' => $token['oauth_token'],
    'oauth_token_secret' => $token['oauth_token_secret'],
    'user_id' => $token['user_id'],
    'screen_name' => $token['screen_name'],
]);
```

to this:  

```php
$user = User::firstOrCreate(
    ['user_id' => $token['user_id']],
    [
        'oauth_token' => $token['oauth_token'],
        'oauth_token_secret' => $token['oauth_token_secret'],
        'user_id' => $token['user_id'],
        'screen_name' => $token['screen_name'],
    ]
);
```
9:59pm: OK, what do we want this dashboard to do? Let's grab at least a timeline and "load more" it, that's our first goal. Thujohn: gimme my timeline!

```php
return view('dashboard')
        ->with('tweets', Twitter::getHomeTimeline(['count' => 20]));
```
Let's make dashboard.blade.php and have it iterate over that tweets object:  

```php
@foreach ($tweets as $tweet)
    &bull; {{ print_r($tweet) }} <br>
@endforeach
```

10:04pm: OMG i forgot how much data came back ðŸ˜³ let's find some good keys. for each tweet we want:  

user name
user username
tweet date/time
tweet contents
user profile pic
tweet link
Â¯\(Â°_o)/Â¯

oops also let's cache:  

```php
$tweets = Cache::remember('tweets::user-' . auth()->id, 5, function () {
    return Twitter::getHomeTimeline(['count' => 20]);
});

return view('dashboard')->with('tweets', $tweets);
```

10:08pm: OK, let's look up those keys on our massive print_r page:

- created_at, formatted like this: Fri Nov 10 03:03:32 +0000 2017
- id, formatted like this: 9134809128309213
- text
- entities, which we'll have to use later to parse out tw.tr short links and usernames etc.
- user
	- name
	- screen_name
	- profile_image_url_https


10:09pm: wife is home from rehearsal, done for the night

7:07am: let's goooooo... pull in tailwind to format our tweet timeline
7:07am: for now just gonna use the external css. faster this way for now. Means we'll actually have to create a shared layout... 
7:11am: annnnd my daughter is awake. done for now.
8:19am: both kids watching nature cat until 8:30am LETS GOOOOO
8:20am: ok I want a super quick start based app layout. let's see if there's one on the tailwind page.
 Send this message to the tailwind guys: "Tailwind needs this: 'Copy this HTML and you'll have a base layout with top nav and a responsive hamburger nav and a healthy constrained content section with a white background and a grey page background and a footer'"
8:22am: Give up and copy the base from my blog
8:27am: realize I've spent 5 minutes talking over this idea with the tailwind guys instead of working on my app. pause and PR it.
10:04am: Back at it sonnnnnnnnn
10:04am: First thing is to get the timeline to look good. that one guy on twitter said he built the whole twitter layout in tailwind in 2 hours. what can i do in 15 minutes? Oh crap just realized a decent client is going to have to handle embedded images, like buttons, rt's etc..... this was a terrible idea. Let's pause and move to the "your friends who are tweeting 140+ too often". :/ sad, because getting that set up is going to be more worrisome and trying architecturally.
10:06am: OK, for now, let's at least grab all my followers and grab all their recent tweets and see if that hits any limits. For each (my followers as followers) get recent tweets  foreach tweet if count > 140 (add to this person's offense count)... going to do it in a view for now.


Wrote this pseudo code:

```php
$following = Cache::remember('followees::user-' . auth()->id(), 5, function () {
    return Twitter::getFollowing();
});

$offenders = [];

foreach ($following as $followee) {
    // @todo do this as a collection thingy
    $offenses = 0;

    foreach ($followee->tweets() as $tweet) {
        if (strlen($tweet->body) > 140) {
            $offenses++;
        }
    }

    $offenders[$followee->id] = $offenses;
}
```

10:11am: Let's turn this into actual code...

OK, thujohn calls it 'getFriends()'. I like that better than followee. Also realized i should cache each user's tweets. OK, but what am I actually getting back? What is this friend object? Let's do a dd.

10:16am:.. ok we have an array called "users" and then cursor information, which I assume is how twitter handles pagination. We'll have to see what facility there is to walk down the pagination lane. First, let's look at a user.

stdClass object. Crap. No facility like getTweets. Let's cache a bit of their info so that we can use some of the "get IDs" calls later instead of always having to pull the full user.

```php
foreach ($friends as $friend) {
    Cache::put('profile::profile_id-' . $friend->id, $friend, 60);

    $tweets = Cache::remember('tweets::profile_id-' . $friend->id, 60, function () use ($friend) {
        return Twitter::getUserTimeline(['user_id' => $friend->id]);
    });

    foreach ($tweets as $tweet) {
        dd($tweet);
    }
}
```
10:20am: called away for work
10:29am: back. Let's see what we're getting on each of those tweets.

Right now, we just care about length. So, let's take a look at "text" length.

Here's what we have right now:

```php
$friends = Cache::remember('friends::user-' . auth()->id(), 15, function () {
    // @todo: handle pagination; this is only the first 20
    return Twitter::getFriends()->users;
});

$offenders = [];

foreach ($friends as $friend) {
    // @todo do this as a collection reduce or contains or whatever thingy
    $offenses = 0;

    Cache::put('profile::profile_id-' . $friend->id, $friend, 60);

    $tweets = Cache::remember('tweets::profile_id-' . $friend->id, 60, function () use ($friend) {
        return Twitter::getUserTimeline(['user_id' => $friend->id]);
    });

    foreach ($tweets as $tweet) {
        if (strlen($tweet->text) > 140) {
            $offenses++;
        }
    }

    $offenders[$friend->id] = $offenses;
}

dd("OFFENDERS:", $offenders);
```


10:37am: tested it out and it's good!

```
"OFFENDERS:"
array:20 [â–¼
  122812713 => 2
  14074644 => 7
  33955538 => 1, 
  ...
]
```

10:38am: Let's filter out the zeros, and then pass them to the view and show our offenders. Haircut at 11am CAN WE DO IT IN TIME

First collection refactor... map and filter...
```php
$offenders = collect($friends)->map(function ($friend) {
    $friend->offenses = 0;

    Cache::put('profile::profile_id-' . $friend->id, $friend, 60);

    $tweets = Cache::remember('tweets::profile_id-' . $friend->id, 60, function () use ($friend) {
        return Twitter::getUserTimeline(['user_id' => $friend->id]);
    });

    foreach ($tweets as $tweet) {
        if (strlen($tweet->text) > 140) {
            $friend->offenses++;
        }
    }

    return $friend;
})->filter(function ($friend) {
    return $friend->offenses > 0;
});
```

Collection refactor 2:

```php
$offenders = collect($friends)->map(function ($friend) {
    Cache::put('profile::profile_id-' . $friend->id, $friend, 60);

    $tweets = Cache::remember('tweets::profile_id-' . $friend->id, 60, function () use ($friend) {
        return Twitter::getUserTimeline(['user_id' => $friend->id]);
    });

    $friend->offenses = collect($tweets)->filter(function ($tweet) {
        return strlen($tweet->text) > 140;
    })->count();

    return $friend;
})->filter(function ($friend) {
    return $friend->offenses > 0;
})->sortByDesc('offenses');

return view('dashboard')->with('offenders', $offenders);
```

10:45am: OK, let's make this a view. Rename dashboard.blade.php to tweets.blade.php and let's make it show the offenders.

```
@foreach ($offenders as $offender)
<div class="my-2 py-2 border-b border-grey">
    &bull; <pre>{{ print_r($offender) }}</pre>
</div>
@endforeach
```

OK, what am I useing for a reference? Where do I see a list of users.. maybe lists?

Here we go:

https://twitter.com/stauffermatt/lists/gainesville-fl-emerg-info/members

Let's build that super quick. Fields we need are:

- profile pic $offender->profile_image_url_https
- url $offender->url
- long name $offender->name
- short name $offender->screen_name
- bio $offender->description
- follow button (skip for now)

```
@foreach ($offenders as $offender)
<div class="my-2 py-2 border-b border-grey">
    <img src="{{ $offender->profile_image_url_https }}">
    <a href="{{ $offender->url }}">
        <span class="font-bold">{{ $offender->name }}</span>
        <span class="color-grey">{{ $offender->screen_name }}</span>
    </a>
    <div>
        {{ $offender->description }}
    </div>
    <a href="#">
        Follow / Unfollow (@todo)
    </a>
</div>
@endforeach
```

10:51am: This could look worse! Let's round it and then i gotta run. `.rounded-full` on the image.

Launching this then gotta run

```
<p>Of your 20 first returned friends, the worst offenders within their last 20 (i think) tweets</p>

@foreach ($offenders as $offender)
<div class="my-2 py-2 border-b border-grey">
    <img src="{{ $offender->profile_image_url_https }}" class="rounded-full">
    <a href="{{ $offender->url }}">
        <span class="font-bold">{{ $offender->name }}</span>
        <span class="color-grey">{{ $offender->screen_name }}</span>
    </a>
    <div>
        {{ $offender->description }}
    </div>
    <div class="font-bold text-lg mt-2">
        Offenses in the last 20 tweets: {{ $offender->offenses }}
    </div>
</div>
@endforeach
```

10:54am: I THINK it's 20 users 20 tweets but i actually don't remember. Let's go! commit push and run.
10:55am: Tested it. Geez i need to update it to use the token when you come back so you dont' have to re-authorize every dang time.
10:23pm: got a couple minutes. let's beat this pagination and get some styles. First, I need to not hate looking at the header. C'monnnnn Tailwind.
 Currently wishing I had een taking screenshots along the way tbh.
OH WAIT i'm logged out let's fix that first. How do I let someone be logged in via twitter without making them authorize every time??
10:27pm: ugh this is super unclear and I'm lazy. just gonna set the session to forever for now. 
10:32pm: ok cleaned up a bit. now time to replicate the twitter profile card in flexbox.
10:45pm: omg why did that take so long

```
<div class="my-2 py-2 border-b border-grey flex content-between">
    <div class="mr-2 flex-no-shrink">
        <img src="{{ $offender->profile_image_url_https }}" class="rounded-full mr-2 w-16 h-16">
    </div>
    <div class="flex-1">
        <a href="{{ $offender->url }}">
            <span class="font-bold">{{ $offender->name }}</span>
            <span class="color-grey">{{ $offender->screen_name }}</span>
        </a>
        <div>
            {{ $offender->description }}
        </div>
    </div>
    <div class="font-bold mt-2 flex-shrink w-32">
        Offenses in the last 20 tweets: {{ $offender->offenses }}
    </div>
</div>
```
